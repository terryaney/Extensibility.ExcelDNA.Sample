<?xml version="1.0" encoding="utf-8"?>
<IntelliSense xmlns="http://schemas.excel-dna.net/intellisense/1.0">
  <FunctionInfo>
    <Function Name="BTR415DBMax" Description="A replacement function for the Cfgena.xla!AnnualLimits() function call with '415DBLimit' name parameter in favor of explicit function name (reduces parameter typo errors).  Returns an integer value representing maximum annual defined benefit payable at Social Security normal retirement age under §415(b).">
      <Argument Name="year" Description="The effective year for the limit, if this parameter is 0 then function will return current year unrounded limit." />
      <Argument Name="rateProj" Description="The increase rate at which to project the limit." />
    </Function>
    <Function Name="BTR415DCMax" Description="A replacement function for the Cfgena.xla!AnnualLimits() function call with '415DCLimit' name parameter in favor of explicit function name (reduces parameter typo errors).  Returns an integer value representing maximum Annual Addition under §415(c). Applies to total (including company) contributions.">
      <Argument Name="year" Description="The effective year for the limit, if this parameter is 0 then function will return current year unrounded limit." />
      <Argument Name="rateProj" Description="The increase rate at which to project the limit." />
    </Function>
    <Function Name="BTR401kMax" Description="A replacement function for the Cfgena.xla!AnnualLimits() function call with 'Max401(k)Contribution' name parameter in favor of explicit function name (reduces parameter typo errors).  Returns an integer value representing maximum permitted salary deferral under §401(k).">
      <Argument Name="year" Description="The effective year for the limit, if this parameter is 0 then function will return current year unrounded limit." />
      <Argument Name="rateProj" Description="The increase rate at which to project the limit." />
    </Function>
    <Function Name="BTR401A17Max" Description="A replacement function for the Cfgena.xla!AnnualLimits() function call with '401(a)(17)PayLimit' name parameter in favor of explicit function name (reduces parameter typo errors).  Returns an integer value representing maximum compensation recognized under qualified pension or profit sharing plans (ignores EGTRRA limit changes). Post-2001 limits are updated each year with the annual CPI/W rate.">
      <Argument Name="year" Description="The effective year for the limit, if this parameter is 0 then function will return current year unrounded limit." />
      <Argument Name="rateProj" Description="The increase rate at which to project the limit." />
    </Function>
    <Function Name="BTRHCELimit" Description="A replacement function for the Cfgena.xla!AnnualLimits() function call with 'HCECompLimit' name parameter in favor of explicit function name (reduces parameter typo errors).  Returns an integer value representing annual compensation used to define highly compensated employee after 1996.">
      <Argument Name="year" Description="The effective year for the limit, if this parameter is 0 then function will return current year unrounded limit." />
      <Argument Name="rateProj" Description="The increase rate at which to project the limit." />
    </Function>
    <Function Name="BTR403bMax" Description="DOC: Han, Cfgena replacement?  Returns an integer value representing maximum permitted salary deferral under §403(b).">
      <Argument Name="year" Description="The effective year for the limit, if this parameter is 0 then function will return current year unrounded limit." />
      <Argument Name="rateProj" Description="The increase rate at which to project the limit." />
    </Function>
    <Function Name="BTR457bMax" Description="DOC: Han, Cfgena replacement?  Returns an integer value representing maximum permitted salary deferral under §457(b).">
      <Argument Name="year" Description="The effective year for the limit, if this parameter is 0 then function will return current year unrounded limit." />
      <Argument Name="rateProj" Description="The increase rate at which to project the limit." />
    </Function>
    <Function Name="BTRCatchupMax" Description="A replacement function for the Cfgena.xla!AnnualLimits() function call with 'Max401(k)Make-up' name parameter in favor of explicit function name (reduces parameter typo errors).  Returns an integer value representing maximum make-up contribution permitted for 50+ year-olds under §401(k).">
      <Argument Name="year" Description="The effective year for the limit, if this parameter is 0 then function will return current year unrounded limit." />
      <Argument Name="rateProj" Description="The increase rate at which to project the limit." />
    </Function>
    <Function Name="BTRMortalityTableNames" Description="List all mortality tables available for BTR Annuity functions" />
    <Function Name="BTRPPASingleLife" Description="Replacement function for the Cfgena.xla!PPASingleLife() function.  Returns a decimal value equal to the selected single life annuity factor by the PPA method.">
      <Argument Name="mortTable" Description="Required.  The name of the mortality table that you wish to use." />
      <Argument Name="intRate1" Description="Required.  The interest rate to use for years 0 - 4." />
      <Argument Name="intRate2" Description="Required.  The interest rate to use for years 5 - 19." />
      <Argument Name="intRate3" Description="Required.  The interest rate to use for years 20 and after." />
      <Argument Name="age" Description="Required.  The current age (see Remarks) to calculate the factor of. Value is typically 20 to 110 (matching mortality table ages). Interpolation is performed if value is not integral." />
      <Argument Name="howDefer" Description="The method used to determine deferrment age.  'A' for age, 'Y' for years.  Default value is 'Y'." />
      <Argument Name="whenDefer" Description="The age or years for deferred payment; 0-110.  When 'howDefer' is Y, deferred age is 'age' + value, otherwise value.  Default value is 0." />
      <Argument Name="howTemp" Description="The method used to determine temporary period.  'A' for age, 'Y' for years.  Default value is 'Y'." />
      <Argument Name="whenTemp" Description="The age or years for temporaryPeriod; 0-120.  When 'howTemp' is Y, temporary period age is 'age' + value, otherwise value.  Default value is 121, which means 'for life'." />
      <Argument Name="howCertain" Description="The method used to determine certain period.  'A' for age, 'Y' for years.  Default value is 'Y'." />
      <Argument Name="whenCertain" Description="The age or years for certain period; 0-110.  This has no effect prior to payment start time.  When 'howTemp' is A and 'whenTemp' is less than deferred age, certain period is 0, else when 'howCertain' is A, certain period is value - deferred age, otherwise value.  Default value is 0." />
      <Argument Name="pmtsPerYr" Description="The frequency of payments per year (positive for beginning of period or negative for end of period payments).  Default value is 12." />
      <Argument Name="mortTableAdj" Description="The adjustment years to apply as a shift to the mortality table (not the age). This is done before unisex blending." />
      <Argument Name="mortSizeAdj" Description="A multiplier to adjust the mortality rates (qx). Entering 0 or leaving it blank will multiply the rates by 1 (unchanged). Any other figure will serve as a multiplier. This action is done prior to applying unisex or generational improvements on the mortality table." />
      <Argument Name="mortImp" Description="The 'MortalityImprovementType' to use, where 0 = Disable, 1 = DynamicScaleAA, 2 = StaticScaleAA, 31 = DynamicScaleBB, and 32 = StaticScaleBB." />
      <Argument Name="impEffYr" Description="The year of calculation if 'mortImp' is 1 or 2. The year entered in this argument will determine the effective year of the projected mortality table." />
      <Argument Name="yob" Description="The year of birth for the member if dynamic generational is enabled 'mortImp' is 1." />
    </Function>
    <Function Name="BTRSingleLife" Description="Replacement function for the Cfgena.xla!SingleLife() function.  Returns a decimal value equal to the selected single life annuity factor.">
      <Argument Name="mortTable" Description="Required.  The name of the mortality table that you wish to use." />
      <Argument Name="intRate" Description="Required.  The interest rate to use." />
      <Argument Name="age" Description="Required.  The current age (see Remarks) to calculate the factor of. Value is typically 20 to 110 (matching mortality table ages). Interpolation is performed if value is not integral." />
      <Argument Name="howDefer" Description="The method used to determine deferrment age.  'A' for age, 'Y' for years.  Default value is 'Y'." />
      <Argument Name="whenDefer" Description="The age or years for deferred payment; 0-110.  When 'howDefer' is Y, deferred age is 'age' + value, otherwise value.  Default value is 0." />
      <Argument Name="howTemp" Description="The method used to determine temporary period.  'A' for age, 'Y' for years.  Default value is 'Y'." />
      <Argument Name="whenTemp" Description="The age or years for temporaryPeriod; 0-120.  When 'howTemp' is Y, temporary period age is 'age' + value, otherwise value.  Default value is 121, which means 'for life'." />
      <Argument Name="howCertain" Description="The method used to determine certain period.  'A' for age, 'Y' for years.  Default value is 'Y'." />
      <Argument Name="whenCertain" Description="The age or years for certain period; 0-110.  This has no effect prior to payment start time.  When 'howTemp' is A and 'whenTemp' is less than deferred age, certain period is 0, else when 'howCertain' is A, certain period is value - deferred age, otherwise value.  Default value is 0." />
      <Argument Name="pmtsPerYear" Description="The frequency of payments per year (positive for beginning of period or negative for end of period payments).  Default value is 12." />
      <Argument Name="mortTableAdj" Description="The adjustment years to apply as a shift to the mortality table (not the age). This is done before unisex blending." />
      <Argument Name="mortSizeAdj" Description="A multiplier to adjust the mortality rates (qx). Entering 0 or leaving it blank will multiply the rates by 1 (unchanged). Any other figure will serve as a multiplier. This action is done prior to applying unisex or generational improvements on the mortality table." />
      <Argument Name="mortalityImprovement" Description="The 'MortalityImprovementType' to use, where 0 = Disable, 1 = DynamicScaleAA, 2 = StaticScaleAA, 31 = DynamicScaleBB, and 32 = StaticScaleBB." />
      <Argument Name="improvementEffectiveYear" Description="The year of calculation if 'mortImp' is 1 or 2. The year entered in this argument will determine the effective year of the projected mortality table." />
      <Argument Name="memberYearOfBirth" Description="The year of birth for the member if dynamic generational is enabled 'mortImp' is 1." />
      <Argument Name="dynamicImprovementStopYear" Description="The stop year if dynamic generational is enabled ('mortImp' is 1) and you wish to stop the generational projection at a future year. This caps the exponent of the projection factors. If this parameter is not filled in or a '0' then it is assumed that the improvements continue indefinitely." />
    </Function>
    <Function Name="BTRSingleLifeDeferPBGC" Description="Replacement function for the Cfgena.xla!SingleLifeDeferPBGC() function.  Returns a decimal value equal to the selected single life annuity factor.">
      <Argument Name="mortTable" Description="Required.  The name of the mortality table that you wish to use." />
      <Argument Name="intRate" Description="Required.  The interest rate to use." />
      <Argument Name="age" Description="Required.  The current age (see Remarks) to calculate the factor of. Value is typically 20 to 110 (matching mortality table ages). Interpolation is performed if value is not integral." />
      <Argument Name="howDefer" Description="The method used to determine deferrment age.  'A' for age, 'Y' for years.  Default value is 'Y'." />
      <Argument Name="whenDefer" Description="The age or years for deferred payment; 0-110.  When 'howDefer' is Y, deferred age is 'age' + value, otherwise value.  Default value is 0." />
      <Argument Name="intRate7" Description="Interest for first 7 deferral years, 0.06 is 6%. (Not allowed to be less than 4%.)" />
      <Argument Name="intRate8" Description="Interest for next 8 deferral years, 0.05 is 5%. (Not allowed to be less than 4%.)" />
      <Argument Name="intRateR" Description="Interest for remaining deferral years, 0.04 is 4%. (Not allowed to be less than 4%.)" />
      <Argument Name="pmtsPerYear" Description="The frequency of payments per year (positive for beginning of period or negative for end of period payments).  Default value is 12." />
      <Argument Name="mortTableAdj" Description="The adjustment years to apply as a shift to the mortality table (not the age). This is done before unisex blending." />
    </Function>
    <Function Name="BTRSingleLifeWithRates" Description="Replacement function for the Cfgena.xla!???() function (DOC: Han, which function?).  Returns a decimal value equal to the selected single life annuity factor.">
      <Argument Name="mortTable" Description="Required.  The name of the mortality table that you wish to use." />
      <Argument Name="intRates" Description="Required.  A 6x2 array representing interest rates.  The first column refers to the period for which the corresponding interest rate in the second column applies." />
      <Argument Name="age" Description="Required.  The current age (see Remarks) to calculate the factor of. Value is typically 20 to 110 (matching mortality table ages). Interpolation is performed if value is not integral." />
      <Argument Name="howDefer" Description="The method used to determine deferrment age.  'A' for age, 'Y' for years.  Default value is 'Y'." />
      <Argument Name="whenDefer" Description="The age or years for deferred payment; 0-110.  When 'howDefer' is Y, deferred age is 'age' + value, otherwise value.  Default value is 0." />
      <Argument Name="howTemp" Description="The method used to determine temporary period.  'A' for age, 'Y' for years.  Default value is 'Y'." />
      <Argument Name="whenTemp" Description="The age or years for temporaryPeriod; 0-120.  When 'howTemp' is Y, temporary period age is 'age' + value, otherwise value.  Default value is 121, which means 'for life'." />
      <Argument Name="howCertain" Description="The method used to determine certain period.  'A' for age, 'Y' for years.  Default value is 'Y'." />
      <Argument Name="whenCertain" Description="The age or years for certain period; 0-110.  This has no effect prior to payment start time.  When 'howTemp' is A and 'whenTemp' is less than deferred age, certain period is 0, else when 'howCertain' is A, certain period is value - deferred age, otherwise value.  Default value is 0." />
      <Argument Name="pmtsPerYear" Description="The frequency of payments per year (positive for beginning of period or negative for end of period payments).  Default value is 12." />
      <Argument Name="mortTableAdj" Description="The adjustment years to apply as a shift to the mortality table (not the age). This is done before unisex blending." />
      <Argument Name="mortSizeAdj" Description="A multiplier to adjust the mortality rates (qx). Entering 0 or leaving it blank will multiply the rates by 1 (unchanged). Any other figure will serve as a multiplier. This action is done prior to applying unisex or generational improvements on the mortality table." />
      <Argument Name="mortalityImprovement" Description="The 'MortalityImprovementType' to use, where 0 = Disable, 1 = DynamicScaleAA, 2 = StaticScaleAA, 31 = DynamicScaleBB, and 32 = StaticScaleBB." />
      <Argument Name="improvementEffectiveYear" Description="The year of calculation if 'mortImp' is 1 or 2. The year entered in this argument will determine the effective year of the projected mortality table." />
      <Argument Name="memberYearOfBirth" Description="The year of birth for the member if dynamic generational is enabled 'mortImp' is 1." />
      <Argument Name="dynamicImprovementStopYear" Description="The stop year if dynamic generational is enabled ('mortImp' is 1) and you wish to stop the generational projection at a future year. This caps the exponent of the projection factors. If this parameter is not filled in or a '0' then it is assumed that the improvements continue indefinitely." />
    </Function>
    <Function Name="BTRSingleLifeComm" Description="Replacement function for the Cfgena.xla!SingleLife() function.  Returns a decimal value equal to the selected single life annuity factor.">
      <Argument Name="mortTable" Description="Required.  The name of the mortality table that you wish to use." />
      <Argument Name="intRate" Description="Required.  The interest rate to use." />
      <Argument Name="age" Description="Required.  The current age (see Remarks) to calculate the factor of. Value is typically 20 to 110 (matching mortality table ages). Interpolation is performed if value is not integral." />
      <Argument Name="typeCF" Description="Commutation Function (CF) type, please see CFGENA help for details." />
      <Argument Name="pmtsPerYear" Description="The frequency of payments per year (positive for beginning of period or negative for end of period payments).  Default value is 12." />
      <Argument Name="mortTableAdj" Description="The adjustment years to apply as a shift to the mortality table (not the age). This is done before unisex blending." />
      <Argument Name="mortSizeAdj" Description="A multiplier to adjust the mortality rates (qx). Entering 0 or leaving it blank will multiply the rates by 1 (unchanged). Any other figure will serve as a multiplier. This action is done prior to applying unisex or generational improvements on the mortality table." />
      <Argument Name="mortalityImprovement" Description="The 'MortalityImprovementType' to use, where 0 = Disable, 1 = DynamicScaleAA, 2 = StaticScaleAA, 31 = DynamicScaleBB, and 32 = StaticScaleBB." />
      <Argument Name="improvementEffectiveYear" Description="The year of calculation if 'mortImp' is 1 or 2. The year entered in this argument will determine the effective year of the projected mortality table." />
      <Argument Name="memberYearOfBirth" Description="The year of birth for the member if dynamic generational is enabled 'mortImp' is 1." />
      <Argument Name="dynamicImprovementStopYear" Description="The stop year if dynamic generational is enabled ('mortImp' is 1) and you wish to stop the generational projection at a future year. This caps the exponent of the projection factors. If this parameter is not filled in or a '0' then it is assumed that the improvements continue indefinitely." />
    </Function>
    <Function Name="BTRPPAJointLife" Description="Replacement function for the Cfgena.xla!PPAJointLife() function.  Returns a decimal value equal to the selected joint life annuity factor by the PPA method.">
      <Argument Name="mortTable" Description="Required.  The name of the mortality table that you wish to use." />
      <Argument Name="spMortTable" Description="Required.  The name of the mortality table that you wish to use." />
      <Argument Name="intRate1" Description="Required.  The interest rate to use for years 0 - 4." />
      <Argument Name="intRate2" Description="Required.  The interest rate to use for years 5 - 19." />
      <Argument Name="intRate3" Description="Required.  The interest rate to use for years 20 and after." />
      <Argument Name="age" Description="Required.  The current member age (see Remarks) to calculate the factor of. Value is typically 20 to 110 (matching mortality table ages). Interpolation is performed if value is not integral." />
      <Argument Name="spAge" Description="Required.  The spouse age (see Remarks) to calculate the factor of. Value is typically 20 to 110 (matching mortality table ages). Interpolation is performed if value is not integral." />
      <Argument Name="annuityOption" Description="The options for annuity factors. 'C' for contingent, 'S' for survivor, 'P' for popup, 'D' for double popup and 'J' for joint life factor only.  Default value is 'C'." />
      <Argument Name="jointFraction" Description="The fraction of contingent/survivor amount to the primary amount; 0-1.  Default value is 0.5." />
      <Argument Name="howDefer" Description="The method used to determine deferrment age.  'A' for age, 'Y' for years.  Default value is 'Y'." />
      <Argument Name="whenDefer" Description="The age or years for deferred payment; 0-110.  When 'howDefer' is Y, deferred age is 'age' + value, otherwise value.  Default value is 0." />
      <Argument Name="howTemp" Description="The method used to determine temporary period.  'A' for age, 'Y' for years.  Default value is 'Y'." />
      <Argument Name="whenTemp" Description="The age or years for temporaryPeriod; 0-120.  When 'howTemp' is Y, temporary period age is 'age' + value, otherwise value.  Default value is 121, which means 'for life'." />
      <Argument Name="howCertain" Description="The method used to determine certain period.  'A' for age, 'Y' for years.  Default value is 'Y'." />
      <Argument Name="whenCertain" Description="The age or years for certain period; 0-110.  This has no effect prior to payment start time.  When 'howTemp' is A and 'whenTemp' is less than deferred age, certain period is 0, else when 'howCertain' is A, certain period is value - deferred age, otherwise value.  Default value is 0." />
      <Argument Name="pmtsPerYr" Description="The frequency of payments per year (positive for beginning of period or negative for end of period payments).  Default value is 12." />
      <Argument Name="maleTableAdjustment" Description="The adjustment years to apply as a shift to the male mortality table (not the age). This is done before unisex blending." />
      <Argument Name="femailTableAdjustment" Description="The adjustment years to apply as a shift to the female mortality table (not the age). This is done before unisex blending." />
      <Argument Name="maleSizeAdjustment" Description="A multiplier to adjust the male mortality rates (qx). Entering 0 or leaving it blank will multiply the rates by 1 (unchanged). Any other figure will serve as a multiplier. This action is done prior to applying unisex or generational improvements on the mortality table." />
      <Argument Name="femaleSizeAdjustment" Description="A multiplier to adjust the female mortality rates (qx). Entering 0 or leaving it blank will multiply the rates by 1 (unchanged). Any other figure will serve as a multiplier. This action is done prior to applying unisex or generational improvements on the mortality table." />
      <Argument Name="maleUnisexPercentage" Description="The unisex blending percentage applied to the male mortality table." />
      <Argument Name="unisexBlending" Description="The 'UnisexBlendingType' to use, where 0 = Unisex off (sex distinct), 1 = Unisex blending by mortality rates, and 2 = Unisex blending by annuity factors." />
      <Argument Name="mortImp" Description="The 'MortalityImprovementType' to use, where 0 = Disable, 1 = DynamicScaleAA, 2 = StaticScaleAA, 31 = DynamicScaleBB, and 32 = StaticScaleBB." />
      <Argument Name="improvementEffectiveYear" Description="The year of calculation if 'mortImp' is 1 or 2. The year entered in this argument will determine the effective year of the projected mortality table." />
      <Argument Name="memberYearOfBirth" Description="The year of birth for the member if dynamic generational is enabled 'mortImp' is 1." />
      <Argument Name="spouseYearOfBirth" Description="The year of birth for the spouse if dynamic generational is enabled 'mortImp' is 1." />
      <Argument Name="dynamicImprovementStopYear" Description="The stop year if dynamic generational is enabled ('mortImp' is 1) and you wish to stop the generational projection at a future year. This caps the exponent of the projection factors. If this parameter is not filled in or a '0' then it is assumed that the improvements continue indefinitely." />
    </Function>
    <Function Name="BTRJointLife" Description="Replacement function for the Cfgena.xla!JointLife() function.  Returns decimal value equal to the selected joint life annuity factor.">
      <Argument Name="mortTable" Description="Required.  The name of the mortality table that you wish to use." />
      <Argument Name="spMortTable" Description="Required.  The name of the mortality table that you wish to use." />
      <Argument Name="intRate" Description="Required.  The interest rate to use." />
      <Argument Name="age" Description="Required.  The current member age (see Remarks) to calculate the factor of. Value is typically 20 to 110 (matching mortality table ages). Interpolation is performed if value is not integral." />
      <Argument Name="spAge" Description="Required.  The current spouse age (see Remarks) to calculate the factor of. Value is typically 20 to 110 (matching mortality table ages). Interpolation is performed if value is not integral." />
      <Argument Name="annuityOption" Description="The options for annuity factors. 'C' for contingent, 'S' for survivor, 'P' for popup, 'D' for double popup and 'J' for joint life factor only.  Default value is 'C'." />
      <Argument Name="jointFraction" Description="The fraction of contingent/survivor amount to the primary amount; 0-1.  Default value is 0.5." />
      <Argument Name="howDefer" Description="The method used to determine deferrment age.  'A' for age, 'Y' for years.  Default value is 'Y'." />
      <Argument Name="whenDefer" Description="The age or years for deferred payment; 0-110.  When 'howDefer' is Y, deferred age is 'age' + value, otherwise value.  Default value is 0." />
      <Argument Name="howTemp" Description="The method used to determine temporary period.  'A' for age, 'Y' for years.  Default value is 'Y'." />
      <Argument Name="whenTemp" Description="The age or years for temporaryPeriod; 0-120.  When 'howTemp' is Y, temporary period age is 'age' + value, otherwise value.  Default value is 121, which means 'for life'." />
      <Argument Name="howCertain" Description="The method used to determine certain period.  'A' for age, 'Y' for years.  Default value is 'Y'." />
      <Argument Name="whenCertain" Description="The age or years for certain period; 0-110.  This has no effect prior to payment start time.  When 'howTemp' is A and 'whenTemp' is less than deferred age, certain period is 0, else when 'howCertain' is A, certain period is value - deferred age, otherwise value.  Default value is 0." />
      <Argument Name="pmtsPerYr" Description="The frequency of payments per year (positive for beginning of period or negative for end of period payments).  Default value is 12." />
      <Argument Name="maleTableAdjustment" Description="The adjustment years to apply as a shift to the male mortality table (not the age). This is done before unisex blending." />
      <Argument Name="femaleTableAdjustment" Description="The adjustment years to apply as a shift to the female mortality table (not the age). This is done before unisex blending." />
      <Argument Name="maleSizeAdjustment" Description="A multiplier to adjust the male mortality rates (qx). Entering 0 or leaving it blank will multiply the rates by 1 (unchanged). Any other figure will serve as a multiplier. This action is done prior to applying unisex or generational improvements on the mortality table." />
      <Argument Name="femaleSizeAdjustment" Description="A multiplier to adjust the female mortality rates (qx). Entering 0 or leaving it blank will multiply the rates by 1 (unchanged). Any other figure will serve as a multiplier. This action is done prior to applying unisex or generational improvements on the mortality table." />
      <Argument Name="maleUnisexPercentage" Description="The unisex blending percentage applied to the male mortality table." />
      <Argument Name="unisexBlending" Description="The 'UnisexBlendingType' to use, where 0 = Unisex off (sex distinct), 1 = Unisex blending by mortality rates, and 2 = Unisex blending by annuity factors." />
      <Argument Name="mortalityImprovement" Description="The 'MortalityImprovementType' to use, where 0 = Disable, 1 = DynamicScaleAA, 2 = StaticScaleAA, 31 = DynamicScaleBB, and 32 = StaticScaleBB." />
      <Argument Name="improvementEffectiveYear" Description="The year of calculation if 'mortImp' is 1 or 2. The year entered in this argument will determine the effective year of the projected mortality table." />
      <Argument Name="memberYearOfBirth" Description="The year of birth for the member if dynamic generational is enabled 'mortImp' is 1." />
      <Argument Name="spouseYearOfBirth" Description="The year of birth for the spouse if dynamic generational is enabled 'mortImp' is 1." />
      <Argument Name="dynamicImprovementStopYear" Description="The stop year if dynamic generational is enabled ('mortImp' is 1) and you wish to stop the generational projection at a future year. This caps the exponent of the projection factors. If this parameter is not filled in or a '0' then it is assumed that the improvements continue indefinitely." />
    </Function>
    <Function Name="BTRAnnBuck" Description="A replacement function for the Annbuck.xla!AnnBuck() function.  Returns a decimal value representing the selected life annuity factor.">
      <Argument Name="intRates" Description="Required.  A 6x2 array representing interest rates.  The first column refers to the period for which the corresponding interest rate in the second column applies." />
      <Argument Name="pmtTiming" Description="Required.  The 'PaymentTimingType' to use where 1 = Continuous Approximation, 2 = Beginning of the month, and 3 = End of the month." />
      <Argument Name="age" Description="Required.  The member's age to calculate; must be a decimal number between 0 and 120, inclusive." />
      <Argument Name="spAge" Description="Required.  The spouse's age to calculate; must be a decimal number between 0 and 120, inclusive.  Use 0 when not calculating joint factors." />
      <Argument Name="sex" Description="Required. The member's 'SexType' to use where 1 = Male and 2 = Female." />
      <Argument Name="spSex" Description="Required. The spouse's 'SexType' to use where 1 = Male and 2 = Female." />
      <Argument Name="deferredAge" Description="Required.  The age that benefits commence. For immediate factors, enter 0 or value equal to 'memberAge'." />
      <Argument Name="tempPeriod" Description="Required.  The number of years that payments are made. Enter 0 if there is no temporary period." />
      <Argument Name="guaranteePeriod" Description="Required.  The number of years for which payments are guaranteed upon death. Enter 0 if there is no guarantee period." />
      <Argument Name="continuingPercentage" Description="Required.  The percentage that which payments will continue to the spouse upon death of the member." />
      <Argument Name="preRetirementMort" Description="Required.  The 'PreRetirementMortalityType' to use, where 1 = NoMortality, 2 = MemberRetirementAgeJointSurvivor, 3 = MemberOnly, 4 = MemberDeathNoGuarantee, 5 = MemberRetirementAgeNoGuarantee, and 6 = MemberRetirementAgeFull." />
      <Argument Name="maleMortalityTable" Description="Required.  The number of the mortality table that you wish to use. For example, enter '214' for GAM83 Male." />
      <Argument Name="femaleMortalityTable" Description="Required.  The number of the mortality table that you wish to use.  See 'mMortTable'." />
      <Argument Name="maleUnisexPercentage" Description="Required.  The unisex blending percentage applied to the male mortality table." />
      <Argument Name="unisexBlending" Description="Required.  The 'UnisexBlendingType' to use, where 0 = Unisex off (sex distinct), 1 = Unisex blending by mortality rates, and 2 = Unisex blending by annuity factors." />
      <Argument Name="maleTableAdjustment" Description="The adjustment years to apply as a shift to the male mortality table (not the age). This is done before unisex blending." />
      <Argument Name="femaleTableAdjustment" Description="The adjustment years to apply as a shift to the female mortality table (not the age). This is done before unisex blending." />
      <Argument Name="mortalityImprovement" Description="The 'MortalityImprovementType' to use, where 0 = Disable, 1 = DynamicScaleAA, 2 = StaticScaleAA, 11 = DynamicScaleCPMA1, 12 = StaticScaleCPMA1, 21 = DynamicScaleCPMA, 22 = StaticScaleCPMA, 31 = DynamicScaleBB, 32 = StaticScaleBB, 41 = DynamicScaleCPMB1, 42 = StaticScaleCPMB1, 51 = DynamicScaleCPMB, and 52 = StaticScaleCPMB." />
      <Argument Name="improvementEffectiveYear" Description="The year of calculation if 'mortImp' is 1 or 2. The year entered in this argument will determine the effective year of the projected mortality table." />
      <Argument Name="memberYearOfBirth" Description="The year of birth for the member if dynamic generational is enabled 'mortImp' is 1." />
      <Argument Name="spouseYearOfBirth" Description="The year of birth for the spouse if dynamic generational is enabled 'mortImp' is 1." />
      <Argument Name="dynamicImprovementStopYear" Description="The stop year if dynamic generational is enabled ('mortImp' is 1) and you wish to stop the generational projection at a future year. This caps the exponent of the projection factors. If this parameter is not filled in or a '0' then it is assumed that the improvements continue indefinitely." />
      <Argument Name="maleSizeAdjustment" Description="A multiplier to adjust the male mortality rates (qx). Entering 0 or leaving it blank will multiply the rates by 1 (unchanged). Any other figure will serve as a multiplier. This action is done prior to applying unisex or generational improvements on the mortality table." />
      <Argument Name="femaleSizeAdjustment" Description="A multiplier to adjust the female mortality rates (qx). Entering 0 or leaving it blank will multiply the rates by 1 (unchanged). Any other figure will serve as a multiplier. This action is done prior to applying unisex or generational improvements on the mortality table." />
    </Function>
    <Function Name="BTRHashString" Description="Hashes a value using the specified hash type.">
      <Argument Name="value" Description="The value to hash." />
      <Argument Name="hashType" Description="Optional.  The hash implementation to use (i.e. Sha256)." />
    </Function>
    <Function Name="BTRHashByteString" Description="Hashes a hex string using the specified hash type.">
      <Argument Name="byteString" Description="The value to hash." />
      <Argument Name="hashType" Description="Optional.  The hash implementation to use (i.e. Sha256)." />
    </Function>
    <Function Name="BTRHashFile" Description="Hashes a file using the specified hash type.">
      <Argument Name="fileName" Description="The file name to hash." />
      <Argument Name="hashType" Description="Optional.  The hash implementation to use (i.e. Sha256)." />
    </Function>
    <Function Name="BTRLittleEndian" Description="Compute the little endian value for a hex string.">
      <Argument Name="hexValue" Description="The value to compute." />
    </Function>
    <Function Name="BTRToUnixTime" Description="Convert a date to Unix time.">
      <Argument Name="date" Description="The date to convert." />
    </Function>
    <Function Name="BTRGetDateForDay" Description="Given a `startDate` date and day of week, find the next date whose day of the week equals `desiredDay` and `dateType`.">
      <Argument Name="startDate" Description="The target date." />
      <Argument Name="desiredDay" Description="Monday, Tuesday, ..., Friday representing which day you want." />
      <Argument Name="dateType" Description="Date increment type.  `PreviousWeek`, `NextWeek`, `PreviousDay`, `NextDay`." />
    </Function>
    <Function Name="BTRFirstOfMonthOrCoincident" Description="Returns a DateTime object converted to the first day of the month coincident or following.">
      <Argument Name="target" Description="The target date." />
    </Function>
    <Function Name="BTRAddYears" Description="Returns a target date after adding specified years.">
      <Argument Name="target" Description="The target date." />
      <Argument Name="years" Description="Number of years to add." />
    </Function>
    <Function Name="BTRAddMonths" Description="Returns a target date after adding specified years.">
      <Argument Name="target" Description="The target date." />
      <Argument Name="months" Description="Number of months to add." />
    </Function>
    <Function Name="BTRRetirementEligible" Description="TODO: HAN: Argument documentation. Determine retirement eligibility.">
      <Argument Name="mode" Description="TODO: Document this parameter." />
      <Argument Name="appendix" Description="TODO: Document this parameter." />
      <Argument Name="dateTerm" Description="TODO: Document this parameter." />
      <Argument Name="age" Description="TODO: Document this parameter." />
      <Argument Name="service" Description="TODO: Document this parameter." />
      <Argument Name="dateParticipation" Description="TODO: Document this parameter." />
      <Argument Name="range" Description="TODO: Document this parameter." />
    </Function>
    <Function Name="BTRAgeAtDate" Description="Returns age at target date as fractional years.">
      <Argument Name="dob" Description="The date of birth." />
      <Argument Name="target" Description="The target date." />
    </Function>
    <Function Name="BTRCurrentAge" Description="Returns current age as fractional years.">
      <Argument Name="dob" Description="The date of birth." />
    </Function>
    <Function Name="BTRDateDiff" Description="Returns difference in years, months, full months (integer) or days between two dates.">
      <Argument Name="start" Description="The start date." />
      <Argument Name="end" Description="The end date." />
      <Argument Name="interval" Description="Optional.  1 for Years, 2 for Months, 3 for FullMonths and 4 for Days.  Default is 1." />
      <Argument Name="inclusive" Description="Optional.  Whether or not to include the last day as part of the calculation.  Default is false." />
    </Function>
    <Function Name="BTROnAll" Description="Returns 1 if all parameters provided evaluate to not 'false' (#error, 0, FALSE, '') or 0 if any parameter provided is 'false'.">
      <Argument Name="parameters" Description="The parameters to evaluate falsy conditions." />
    </Function>
    <Function Name="BTROnAny" Description="Returns 1 if any parameters provided evaluate to not 'false' (#error, 0, FALSE, '') or 0 if all parameters provided are 'false'.">
      <Argument Name="parameters" Description="The parameters to evaluate falsy conditions." />
    </Function>
    <Function Name="BTRLogicAll" Description="Returns 1 if all keys provided evaluate to not 'false' (#error, 0, FALSE) or 0 if any key provided is 'false'.  Each 'key' is a lookup into provided table, and the 'value' column is evalated for 'false'.">
      <Argument Name="keys" Description="Comma delimitted list of key values to use to find the rows in the table parameter." />
      <Argument Name="table" Description="Table containing the columns holding keys and values to find and do a falsy check (#error, 0, FALSE)." />
      <Argument Name="valueColumn" Description="The column (1..table columns) number containing the value to compare to ensure not falsy.  Default is the last column of 'table' parameter." />
      <Argument Name="caseSensitive" Description="Whether or not a case sensitive search is performed. Default is false." />
    </Function>
    <Function Name="BTRLogicAny" Description="Returns 1 if any key provided evaluates to not 'false' (#error, 0, FALSE) or 0 if all keys provided are 'false'.  Each 'key' is a lookup into provided table, and the 'value' column is evalated for 'false'.">
      <Argument Name="keys" Description="Comma delimitted list of key values to use to find the rows in the table parameter." />
      <Argument Name="table" Description="Table containing the columns holding keys and values to find and do a falsy check (#error, 0, FALSE)." />
      <Argument Name="valueColumn" Description="The column (1..table columns) number containing the value to compare to ensure not falsy.  Default is the last column of 'table' parameter." />
      <Argument Name="caseSensitive" Description="Whether or not a case sensitive search is performed. Default is false." />
    </Function>
    <Function Name="BTRLogicIfElse" Description="Given param array of {condition1}, {expression1}, {condition2}, {expression2}, .., {conditionN, {expressionN}, returns expression value for the first condition that evalates to true.  If all conditions are false, returns #NA.">
      <Argument Name="expressions" Description="List of 'paired' parameters.  Each pair is condition, expression.  If condition is true, return expression." />
    </Function>
    <Function Name="BTRLogicIn" Description="Returns 1 if 'value' is present anywhere in the 'table' parameter.">
      <Argument Name="value" Description="The value to search for." />
      <Argument Name="table" Description="Table containing values to search." />
      <Argument Name="caseSensitive" Description="Whether or not a case sensitive search is performed. Default is false." />
    </Function>
    <Function Name="BTRGetMacroVariable" Description="Returns variable value set during macro processing.  If not during macro processing, this returns null.">
      <Argument Name="name" Description="The name of the variable stored via SetVariable action during RBLe Macro processing you wish to retrieve.  This is a placeholder function returning 'empty' when used in Excel, but during ProcessWorkbook execution it evaluates properly." />
    </Function>
    <Function Name="BTRCellAddress" Description="Returns the address (similar to Cell('address', cell) format) of a named range to be used in RBLe Macro processing.">
      <Argument Name="range" Description="The cell or range used as starting point of address." />
      <Argument Name="rowOffset" Description="The number of rows (positive, negative, or 0 (zero)) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward. The default value is 0." />
      <Argument Name="columnOffset" Description="The number of columns (positive, negative, or 0 (zero)) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left. The default value is 0." />
      <Argument Name="additionalRows" Description="The number of rows (positive, negative, or 0 (zero)) by which the range is to be resized. Positive values grow downward, and negative values shrink upward. The default value is 0." />
      <Argument Name="additionalColumns" Description="The number of columns (positive, negative, or 0 (zero)) by which the range is to be resized. Positive values grow to the right, and negative values shrink to the left. The default value is 0." />
    </Function>
    <Function Name="BTRPV" Description="Calculates the present value of a loan or an investment, based on a variable, multiple interest rates.">
      <Argument Name="period" Description="Required. The total number of periods to calculate.  For both interestRates and paymentAmounts, if the period is greater than number of elements present in each array, the array is padded to the end using the last element provided." />
      <Argument Name="interestRates" Description="Required. The interest rates per period. For example, if you obtain an automobile loan at a 10 percent annual interest rate and make monthly payments, your interest rate per month is 10%/12, or 0.83%. You would enter 10%/12, or 0.83%, or 0.0083, into the formula as the rate." />
      <Argument Name="paymentAmounts" Description="Required. The payment amounts made each period. Typically, each amount includes principal and interest but no other fees or taxes. For example, a monthly payment on a $10,000, four-year car loan at 12 percent is $263.33. You would enter -263.33 into the formula as one of the amounts." />
      <Argument Name="paymentTiming" Description="Optional. The number 0 (at the end of the period) or 1 (at the beginning of the period) and indicates when payments are due.  The default is 0." />
    </Function>
    <Function Name="BTRElapsed360" Description="Calculates elapsed days using 360 days per year.">
      <Argument Name="dateStart" Description="Required. The start date." />
      <Argument Name="dateEnd" Description="Required. The end date." />
    </Function>
    <Function Name="BTRXIRR" Description="Returns the internal rate of return for a schedule of cash flows that is not necessarily periodic.">
      <Argument Name="values" Description="Required. A series of cash flows that corresponds to a schedule of payments in dates. The first payment is optional and corresponds to a cost or payment that occurs at the beginning of the investment. If the first value is a cost or payment, it must be a negative value. All succeeding payments are discounted based on a 365-day year. The series of values must contain at least one positive and one negative value." />
      <Argument Name="dates" Description="Required. A schedule of payment dates that corresponds to the cash flow payments. Dates may occur in any order. Dates should be entered by using the DATE function, or as results of other formulas or functions. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text." />
      <Argument Name="iterations" Description="Optional. The default is 25." />
      <Argument Name="maxRate" Description="Optional. The default is 5.0." />
      <Argument Name="truncateTime" Description="Optional. The default is true." />
    </Function>
    <Function Name="BTRAnnualReturn" Description="DOC: Han, Cfgena replacement?  Returns plan investment annual return based on Fund allocations and how Funds are mapped to assets classes.">
      <Argument Name="tableName" Description="Required.  Fund Table Name." />
      <Argument Name="planType" Description="Required.  Plan type." />
      <Argument Name="year" Description="Required.  Year of requested returns." />
      <Argument Name="yearCurrent" Description="Required.  Current year." />
      <Argument Name="fundAllocations" Description="Required.  Current fund allocations." />
      <Argument Name="inputAllocations" Description="Required.  Entered fund allocations (this will override current or future allocations)." />
      <Argument Name="returnByClass" Description="Required.  Array of investment returns by assets classes." />
      <Argument Name="fundIndex" Description="Optional.  If provided allocation will be changed 100% to that target fund." />
    </Function>
    <Function Name="BTRAssetClassAllocation" Description="DOC: Han, Cfgena replacement?  Returns plan asset class allocation based on Fund allocations and how Funds are mapped to assets classes.">
      <Argument Name="tableName" Description="Required.  Fund Table Name." />
      <Argument Name="planType" Description="Required.  Plan type." />
      <Argument Name="year" Description="Required.  Year of requested allocation." />
      <Argument Name="fundAllocations" Description="Required.  Current fund allocations." />
      <Argument Name="inputAllocations" Description="Optional.  Entered fund allocations (this will override current or future allocations)." />
      <Argument Name="fundIndex" Description="Optional.  If provided allocation will be changed 100% to that target fund." />
    </Function>
    <Function Name="BTRTargetFundID" Description="DOC: Han, Cfgena replacement?  Returns index of Target Fund based on retirement year and target fund group.">
      <Argument Name="tableName" Description="Fund Table Name." />
      <Argument Name="yearRetirement" Description="Year of retirement." />
      <Argument Name="targetFundGroup" Description="Target fund group ID." />
    </Function>
    <Function Name="BTRCalculateLoan" Description="DOC: Han, Cfgena replacement?  Returns an array with 3 values: balance at EOY, principle payments with investment return at EOY and principle payments with investment return at EOB.">
      <Argument Name="balance" Description="Required. Loan balance." />
      <Argument Name="payPeriod" Description="Required. Number of Pay period in a year." />
      <Argument Name="paymentPerPayPeriod" Description="Required. Payment per pay period." />
      <Argument Name="interestRate" Description="Required. Loan interest rate." />
      <Argument Name="monthEnd" Description="Required. Calculate contributions as of the end of this month." />
      <Argument Name="returnRate" Description="Required. Investment rate of return." />
      <Argument Name="startPayPeriod" Description="Optional. Starting pay period. Default to 1." />
      <Argument Name="midPointCont" Description="Optional. Use mid point contributions timing calculation method." />
      <Argument Name="rounding" Description="Optional. Rounding, Defaulted to 0 decimals" />
    </Function>
    <Function Name="BTRGetContributions" Description="DOC: Han, Cfgena replacement?  Returns 401k contributions/match.">
      <Argument Name="matchType" Description="Required.  The MatchType to use for calculations.  MultiplierBasedOnPercent = 1, MultiplierBasedOnDollars = 2, ERMatchPercentBasedOnPercent = 3, ERMatchDollarsBasedOnDollars = 4." />
      <Argument Name="isTrueUp" Description="Required.  Whether to credit true-up math at the end of the year when employee hits contribution limit." />
      <Argument Name="isCatchUpMatch" Description="Required.  Whether to provide match on catch-up contributions." />
      <Argument Name="isPreTaxOverflowToAfterTax" Description="Required.  Whether to allow pre-tax contributions over limit to overflow to after-tax contributions." />
      <Argument Name="isMatchAfterTax" Description="Required.  Whether to provide match on after-tax contributions." />
      <Argument Name="matchParam" Description="Required.  | delimited list of periods.  Each period is in the form of M:P:P where M is number of months for this period, and each P is a tier of a , seperated pair of decimal values." />
      <Argument Name="contributionType" Description="Required.  The ContributionType to use for calculations.  PercentBasedOnAge = 1, PercentBasedOnService = 2, PercentBasedOnAgePlusService = 3." />
      <Argument Name="contributionParam" Description="Required.  Contribution parameters.  See mPm for info." />
      <Argument Name="year" Description="Required.  Calculation year." />
      <Argument Name="monthEnd" Description="Required.  Calculate contributions as of the end of this month." />
      <Argument Name="payPeriod" Description="Required.  Number of Pay period in a year." />
      <Argument Name="rateOfPay" Description="Required.  Annual Pay rate as of start pay period." />
      <Argument Name="payPeriodWhenPayIncreases" Description="Required.  Pay period when pay increases." />
      <Argument Name="ratePayIncrease" Description="Required.  Pay increase rate." />
      <Argument Name="rateOfInflation" Description="Required.  Inflation rate (used to project limits)." />
      <Argument Name="rateOfReturn" Description="Required.  Investment rate of return." />
      <Argument Name="preTaxPercentage" Description="Optional.  Pre-tax contribution as a % of pay." />
      <Argument Name="preTaxFlatPerPayPeriod" Description="Optional.  Flat $ pre-tax contribution amount per pay period." />
      <Argument Name="rothPercentage" Description="Optional.  Roth contribution as a % of pay." />
      <Argument Name="rothFlatPerPayPeriod" Description="Optional.  Flat $ Roth contribution amount per pay period." />
      <Argument Name="afterTaxPercentage" Description="Optional.  After-tax contribution as a % of pay." />
      <Argument Name="afterTaxFlatPerPayPeriod" Description="Optional.  Flat $ after-tax contribution amount per pay period." />
      <Argument Name="startPayPeriod" Description="Optional.  Starting Pay period.  Defaults to 1." />
      <Argument Name="ytdPay" Description="Optional.  YTD savings pay." />
      <Argument Name="ytdPreTax" Description="Optional.  YTD pre-tax contributions." />
      <Argument Name="ytdRoth" Description="Optional.  YTD Roth contributions." />
      <Argument Name="ytdAfterTax" Description="Optional.  YTD after-tax contributions." />
      <Argument Name="ytdPreTaxCatchUp" Description="Optional.  YTD pre-tax catch-up contributions." />
      <Argument Name="ytdRothCatchUp" Description="Optional.  YTD Roth catch-up contributions." />
      <Argument Name="ytdErMatch" Description="Optional.  YTD employer match contributions." />
      <Argument Name="ytdErContribution" Description="Optional.  YTD employer contributions." />
      <Argument Name="ageBOY" Description="Optional.  Age at BOY." />
      <Argument Name="svcBOY" Description="Optional.  Service at BOY." />
      <Argument Name="erContributionAnnualLimit" Description="Optional.  Employer contribution annual limit. Defaults to 0, which means unlimited." />
      <Argument Name="isRetirementYear" Description="Optional.  DOC: Han, Is this retirement year?" />
      <Argument Name="matchFrequency" Description="Optional.  Frequency of match in a year." />
      <Argument Name="erContributionFrequency" Description="Optional.  Frequency of ER Contribution in a year." />
      <Argument Name="preTaxRothPayIsLimited" Description="Optional.  Employee Pretax/Roth &amp; Catchup Contributions is based on limited pay." />
      <Argument Name="midPointContribution" Description="Optional.  Use mid point contributions timing calculation method." />
      <Argument Name="noLimit" Description="Optional.  Don't apply IRS limit." />
      <Argument Name="increaseMonth" Description="Optional.  Pretax auto increase timing (month): Enter 4 if increase happens on 4/1." />
      <Argument Name="increaseFrequency" Description="Optional.  Pretax auto increase frequency per year." />
      <Argument Name="increasePercentage" Description="Optional.  Pretax auto increase percentage." />
      <Argument Name="rateMax" Description="Optional.  Pretax maximum rate." />
      <Argument Name="limitPay" Description="Optional.  Pay Limit." />
      <Argument Name="limitPreTax" Description="Optional.  Pretax limit." />
      <Argument Name="limitContribution" Description="Optional.  Contribution limit." />
      <Argument Name="isOverflowToNonQual" Description="Optional.  Overflow to non qualified plan." />
      <Argument Name="limitAfterTax" Description="Optional.  Aftertax limit." />
      <Argument Name="isOverflowToCatchUp" Description="Optional.  Overflow from preTax to catchup." />
      <Argument Name="preTaxCatchUpPercentage" Description="Optional.  Pre-tax catchup contribution as a % of pay." />
      <Argument Name="preTaxCatchUpFlatPerPayPeriod" Description="Optional.  Flat $ pre-tax catchup contribution amount per pay period." />
      <Argument Name="rothCatchUpPercentage" Description="Optional.  Roth catchup contribution as a % of pay." />
      <Argument Name="rothCatchUpFlatPerPayPeriod" Description="Optional.  Flat $ Roth catchup contribution amount per pay period." />
      <Argument Name="matchPayIsLimited" Description="Optional.  Employer match is based on limited pay." />
    </Function>
    <Function Name="BTRGet401kContributions" Description="DOC: Han, Cfgena replacement?  Returns 401(k) contributions/match.">
      <Argument Name="matchType" Description="Required.  The MatchType to use for calculations.  MultiplierBasedOnPercent = 1, MultiplierBasedOnDollars = 2, ERMatchPercentBasedOnPercent = 3, ERMatchDollarsBasedOnDollars = 4." />
      <Argument Name="isTrueUp" Description="Required.  Whether to credit true-up math at the end of the year when employee hits contribution limit." />
      <Argument Name="isCatchUpMatch" Description="Required.  Whether to provide match on catch-up contributions." />
      <Argument Name="isPreTaxOverflowToAfterTax" Description="Required.  Whether to allow pre-tax contributions over limit to overflow to after-tax contributions." />
      <Argument Name="isAfterTaxMatch" Description="Required.  Whether to provide match on after-tax contributions." />
      <Argument Name="matchParam" Description="Required.  | delimited list of periods.  Each period is in the form of M:P:P where M is number of months for this period, and each P is a tier of a , seperated pair of decimal values." />
      <Argument Name="year" Description="Required.  Calculation year." />
      <Argument Name="monthEnd" Description="Required.  Calculate contributions as of the end of this month." />
      <Argument Name="payPeriod" Description="Required.  Number of Pay period in a year." />
      <Argument Name="rateOfPay" Description="Required.  Annual Pay rate as of start pay period." />
      <Argument Name="payPeriodWhenPayIncreases" Description="Required.  Pay period when pay increases." />
      <Argument Name="ratePayIncrease" Description="Required.  Pay increase rate." />
      <Argument Name="rateOfInflation" Description="Required.  Inflation rate (used to project limits)." />
      <Argument Name="rateOfReturn" Description="Required.  Investment rate of return." />
      <Argument Name="preTaxPercentage" Description="Optional.  Pre-tax contribution as a % of pay." />
      <Argument Name="preTaxFlatPerPayPeriod" Description="Optional.  Flat $ pre-tax contribution amount per pay period." />
      <Argument Name="rothPercentage" Description="Optional.  Roth contribution as a % of pay." />
      <Argument Name="rothFlatPerPayPeriod" Description="Optional.  Flat $ Roth contribution amount per pay period." />
      <Argument Name="afterTaxPercentage" Description="Optional.  After-tax contribution as a % of pay." />
      <Argument Name="afterTaxFlatPerPayPeriod" Description="Optional.  Flat $ after-tax contribution amount per pay period." />
      <Argument Name="startPayPeriod" Description="Optional.  Starting Pay period.  Defaults to 1." />
      <Argument Name="ytdPay" Description="Optional.  YTD savings pay." />
      <Argument Name="ytdPreTax" Description="Optional.  YTD pre-tax contributions." />
      <Argument Name="ytdRoth" Description="Optional.  YTD Roth contributions." />
      <Argument Name="ytdAfterTax" Description="Optional.  YTD after-tax contributions." />
      <Argument Name="ytdPreTaxCatchUp" Description="Optional.  YTD pre-tax catch-up contributions." />
      <Argument Name="ytdRothCatchUp" Description="Optional.  YTD Roth catch-up contributions." />
      <Argument Name="ytdErMatch" Description="Optional.  YTD employer match contributions." />
      <Argument Name="ageBOY" Description="Optional.  Age at BOY." />
      <Argument Name="isRetirementYear" Description="Optional.  Is this retirement year?" />
      <Argument Name="matchFrequency" Description="Optional.  Frequency of match in a year." />
      <Argument Name="preTaxRothPayIsLimited" Description="Optional.  Employee Pretax/Roth &amp; Catchup Contributions is based on limited pay." />
      <Argument Name="midPointContribution" Description="Optional.  Use mid point contributions timing calculation method." />
      <Argument Name="noLimit" Description="Optional.  Don't apply IRS limit." />
      <Argument Name="increaseMonth" Description="Optional.  Pretax auto increase timing (month): Enter 4 if increase happens on 4/1." />
      <Argument Name="increaseFrequency" Description="Optional.  Pretax auto increase frequency per year." />
      <Argument Name="increasePercentage" Description="Optional.  Pretax auto increase percentage." />
      <Argument Name="rateMax" Description="Optional.  Pretax maximum rate." />
      <Argument Name="limitPay" Description="Optional.  Pay Limit." />
      <Argument Name="limitPreTax" Description="Optional.  Pretax limit." />
      <Argument Name="limitContribution" Description="Optional.  Contribution limit." />
      <Argument Name="isOverflowToNonQual" Description="Optional.  Overflow to non qualified plan." />
      <Argument Name="limitAfterTax" Description="Optional.  Aftertax limit." />
      <Argument Name="isOverFlowToCatchUp" Description="Optional.  Overflow from preTax to catchup." />
      <Argument Name="preTaxCatchUpPercentage" Description="Optional.  Pre-tax catchup contribution as a % of pay." />
      <Argument Name="preTaxCatchUpFlatPerPayPeriod" Description="Optional.  Flat $ pre-tax catchup contribution amount per pay period." />
      <Argument Name="rothCatchUpPercentage" Description="Optional.  Roth catchup contribution as a % of pay." />
      <Argument Name="rothCatchUpFlatPerPayPeriod" Description="Optional.  Flat $ Roth catchup contribution amount per pay period." />
      <Argument Name="matchPayIsLimited" Description="Optional.  Employer match is based on limited pay." />
    </Function>
    <Function Name="BTRGetMatchPct" Description="DOC: Han, Cfgena replacement?  Returns employer match % based on match parameters.">
      <Argument Name="matchType" Description="Required.  The MatchType to use for calculations.  MultiplierBasedOnPercent = 1, ERMatchBasedOnPercent = 3" />
      <Argument Name="isTrueUp" Description="Required.  Whether to credit true-up math at the end of the year when employee hits contribution limit." />
      <Argument Name="isMatchCatchUp" Description="Required.  Whether to provide match on catch-up contributions." />
      <Argument Name="isPreTaxOverflowToAfterTax" Description="Required.  Whether to allow pre-tax contributions over limit to overflow to after-tax contributions." />
      <Argument Name="isAfterTaxMatch" Description="Required.  Whether to provide match on after-tax contributions." />
      <Argument Name="matchParam" Description="Required.  | delimited list of periods.  Each period is in the form of M:P:P where M is number of months for this period, and each P is a tier of a , seperated pair of decimal values." />
      <Argument Name="year" Description="Required.  Calculation year." />
      <Argument Name="monthEnd" Description="Required.  Calculate match as of the end of this month." />
      <Argument Name="payPeriod" Description="Required.  Number of Pay period in a year." />
      <Argument Name="rateOfPay" Description="Required.  Annual Pay rate as of start pay period." />
      <Argument Name="payPeriodWhenPayIncreases" Description="Required.  Pay period when pay increases." />
      <Argument Name="rateOfPayIncrease" Description="Required.  Pay increase rate." />
      <Argument Name="rateOfInflation" Description="Required.  Inflation rate (used to project limits)." />
      <Argument Name="preTaxPercentage" Description="Optional.  Pre-tax contribution as a % of pay." />
      <Argument Name="preTaxFlatPerPayPeriod" Description="Optional.  Flat $ pre-tax contribution amount per pay period." />
      <Argument Name="rothPercentage" Description="Optional.  Roth contribution as a % of pay." />
      <Argument Name="rothFlatPerPayPeriod" Description="Optional.  Flat $ Roth contribution amount per pay period." />
      <Argument Name="afterTaxPercentage" Description="Optional.  After-tax contribution as a % of pay." />
      <Argument Name="afterTaxFlatPerPayPeriod" Description="Optional.  Flat $ after-tax contribution amount per pay period." />
      <Argument Name="startPayPeriod" Description="Optional.  Starting Pay period.  Defaults to 1." />
      <Argument Name="ytdPay" Description="Optional.  YTD savings pay." />
      <Argument Name="ytdPreTax" Description="Optional.  YTD pre-tax contributions." />
      <Argument Name="ytdRoth" Description="Optional.  YTD Roth contributions." />
      <Argument Name="ytdAfterTax" Description="Optional.  YTD after-tax contributions." />
      <Argument Name="ytdPreTaxCatchUp" Description="Optional.  YTD pre-tax catch-up contributions." />
      <Argument Name="ytdRothCatchUp" Description="Optional.  YTD Roth catch-up contributions." />
      <Argument Name="ytdErMatch" Description="Optional.  YTD employer match contributions." />
      <Argument Name="ageBOY" Description="Optional.  Age at BOY." />
      <Argument Name="matchFrequency" Description="Optional.  Frequency of match in a year." />
      <Argument Name="limitAfterTax" Description="Optional.  Aftertax limit." />
      <Argument Name="isOverflowToCatchUp" Description="Optional.  Overflow from preTax to catchup." />
      <Argument Name="preTaxCatchUpPercentage" Description="Optional.  Pre-tax catchup contribution as a % of pay." />
      <Argument Name="preTaxCatchUpFlatPerPayPeriod" Description="Optional.  Flat $ pre-tax catchup contribution amount per pay period." />
      <Argument Name="rothCatchUpPercentage" Description="Optional.  Roth catchup contribution as a % of pay." />
      <Argument Name="rothCatchUpFlatPerPayPeriod" Description="Optional.  Flat $ Roth catchup contribution amount per pay period." />
    </Function>
    <Function Name="BTRGetERContribution" Description="DOC: Han, Cfgena replacement?  Returns employer contributions.">
      <Argument Name="contributionType" Description="Required.  The ContributionType to use for calculations.  PercentBasedOnAge = 1, PercentBasedOnService = 2, PercentBasedOnAgePlusService = 3." />
      <Argument Name="contributionParam" Description="Required.  Contribution parameters.  See matchParm for info." />
      <Argument Name="year" Description="Required.  Calculation year." />
      <Argument Name="monthEnd" Description="Required.  Calculate contributions as of the end of this month." />
      <Argument Name="payPeriod" Description="Required.  Number of Pay period in a year." />
      <Argument Name="rateOfPay" Description="Required.  Annual Pay rate as of start pay period." />
      <Argument Name="payPeriodWhenPayIncreases" Description="Required.  Pay period when pay increases." />
      <Argument Name="rateOfPayIncrease" Description="Required.  Pay increase rate." />
      <Argument Name="rateOfInflation" Description="Required.  Inflation rate (used to project limits)." />
      <Argument Name="rateOfReturn" Description="Required.  Investment rate of return." />
      <Argument Name="startPayPeriod" Description="Optional.  Starting Pay period.  Defaults to 1." />
      <Argument Name="ytdPay" Description="Optional.  YTD savings pay." />
      <Argument Name="ytdErContribution" Description="Optional.  YTD employer contributions." />
      <Argument Name="ageBOY" Description="Optional.  Age at BOY." />
      <Argument Name="svcBOY" Description="Optional.  Service at BOY." />
      <Argument Name="erContributionAnnualLimit" Description="Optional.  Employer contribution annual limit. Defaults to unlimited." />
      <Argument Name="erContributionFrequency" Description="Optional.  Frequency of ER Contribution in a year." />
      <Argument Name="midPointContribution" Description="Optional.  Use mid point contributions timing calculation method." />
      <Argument Name="noLimit" Description="Optional.  Don't apply IRS limit." />
      <Argument Name="limitPay" Description="Optional.  Pay Limit." />
      <Argument Name="limitContribution" Description="Optional.  Contribution limit." />
      <Argument Name="isOverflowToNonQual" Description="Optional.  Overflow to non qualified plan." />
    </Function>
    <Function Name="BTRGetERContributionPct" Description="DOC: Han, Cfgena replacement?  Returns employer contribution % based on contribution parameters.">
      <Argument Name="contributionType" Description="Required.  The ContributionType to use for calculations.  PercentBasedOnAge = 1, PercentBasedOnService = 2, PercentBasedOnAgePlusService = 3." />
      <Argument Name="contributionParam" Description="Required.  Contribution parameters.  See matchParm for info." />
      <Argument Name="year" Description="Required.  Calculation year." />
      <Argument Name="monthEnd" Description="Required.  Calculate contributions as of the end of this month." />
      <Argument Name="payPeriod" Description="Required.  Number of Pay period in a year." />
      <Argument Name="rateOfPay" Description="Required.  Annual Pay rate as of start pay period." />
      <Argument Name="payPeriodWhenPayIncreases" Description="Required.  Pay period when pay increases." />
      <Argument Name="rateOfPayIncrease" Description="Required.  Pay increase rate." />
      <Argument Name="rateOfInflation" Description="Required.  Inflation rate (used to project limits)." />
      <Argument Name="startPayPeriod" Description="Optional.  Starting pay period.  Defaults to 1." />
      <Argument Name="ytdPay" Description="Optional.  YTD savings pay." />
      <Argument Name="ytdErContribution" Description="Optional.  YTD employer contributions." />
      <Argument Name="ageBOY" Description="Optional.  Age at BOY." />
      <Argument Name="svcBOY" Description="Optional.  Service at BOY." />
      <Argument Name="erContributionAnnualLimit" Description="Optional.  Employer contribution annual limit. Defaults to unlimited." />
      <Argument Name="erContributionFrequency" Description="Optional.  Frequency of ER Contribution in a year." />
    </Function>
    <Function Name="BTRGetMinContributionsForMaxMatch" Description="DOC: Han, Cfgena replacement?  Returns minimum employee contribution to get max mactch based on match parameters.">
      <Argument Name="matchType" Description="Required.  The MatchType to use for calculations.  MultiplierBasedOnPercent = 1, ERMatchBasedOnPercent = 3" />
      <Argument Name="matchParam" Description="Required.  | delimited list of periods.  Each period is in the form of M:P:P where M is number of months for this period, and each P is a tier of a , seperated pair of decimal values." />
      <Argument Name="payPeriod" Description="Optional.  Number of Pay period in a year.  Default is 1." />
      <Argument Name="currPayPeriod" Description="Optional.  Current Pay Period.  Default is 1." />
    </Function>
    <Function Name="BTRLastLawYear" Description="Last law year for which yearly indexed functions were updated." />
    <Function Name="BTRSSNRA" Description="A replacement function for the Cfgena.xla!SSNRA() function.  Returns a decimal value representing the Social Security normal retirement age.">
      <Argument Name="dateBirth" Description="The member's date of birth." />
      <Argument Name="simplifiedResultsArg" Description="Simplified integer values (e.g. for Covered Compensation and IRC 415 limit purposes), otherwise actual values for Social Security use." />
    </Function>
    <Function Name="BTRSSNRD" Description="A replacement function for the Cfgena.xla!SSNRD() function.  Returns a decimal value representing the Social Security normal retirement date.">
      <Argument Name="dateBirth" Description="The member's date of birth." />
      <Argument Name="simplifiedResultsArg" Description="Simplified integer values (e.g. for Covered Compensation and IRC 415 limit purposes), otherwise actual values for Social Security use." />
    </Function>
    <Function Name="BTRSSPIA" Description="A replacement function for the Cfgena.xla!SSExactPays() function using a single current pay value.  Returns a decimal value representing the age 65 Social Security monthly benefit using exact pays.">
      <Argument Name="dateBirth" Description="The member's date of birth." />
      <Argument Name="dateEvent" Description="The member's date of event (i.e. Date Term)." />
      <Argument Name="ageRetire" Description="The member's age at retirement." />
      <Argument Name="payCurrent" Description="The member's annual compensation for current Social Security year.  Annual compensation will be projected for any missing years from age 18 through the year before payment start." />
      <Argument Name="rateNAW" Description="NAW increase rate." />
      <Argument Name="rateFuturePay" Description="Future pay increase rate." />
      <Argument Name="rateBackPay" Description="Backward pay increase rate." />
      <Argument Name="addNAWToBackPay" Description="Add NAW to backward pay increase rate (TRUE or FALSE)." />
      <Argument Name="rateCOLA" Description="CPI increase rate." />
      <Argument Name="lawYear" Description="Social Security law year." />
      <Argument Name="futurePayType" Description="Type of pay after the year before termination year: C=project one more year at rateFuturePay then stay constant till the year before commencement year, L= stay constant till the year before commencement year., Z=zero pay starting termination year." />
      <Argument Name="firstPayAge" Description="The first age when emeber started receiving compensation." />
      <Argument Name="stopNAWGrowth" Description="Stop NAW growth after termination?" />
      <Argument Name="lastPayYear" Description="Last pay year" />
      <Argument Name="postNRDIncrease" Description="Include post NRD Increase?" />
      <Argument Name="yearCOLAStops" Description="Year COLA Stops" />
    </Function>
    <Function Name="BTRSSPIASalHist" Description="A replacement function for the Cfgena.xla!SSTableProj() function using a pay array.  Returns a decimal value representing the age 65 Social Security monthly benefit using exact pays.">
      <Argument Name="dateBirth" Description="The member's date of birth." />
      <Argument Name="dateEvent" Description="The member's date of event (i.e. Date Term)." />
      <Argument Name="ageRetire" Description="The member's age at retirement." />
      <Argument Name="actualPay" Description="The member's annual compensations ending at current Social Security year.  Annual compensation will be projected for any missing years from age 18 through the year before payment start." />
      <Argument Name="rateNAW" Description="NAW increase rate." />
      <Argument Name="rateFuturePay" Description="Future pay increase rate." />
      <Argument Name="rateBackPay" Description="Backward pay increase rate." />
      <Argument Name="addNAWToBackPay" Description="Add NAW to backward pay increase rate (TRUE or FALSE)." />
      <Argument Name="rateCOLA" Description="CPI increase rate." />
      <Argument Name="lastPayYear" Description="Ending year of compensation in the compensation array." />
      <Argument Name="lawYear" Description="Social Security law year." />
      <Argument Name="futurePayType" Description="Type of pay after the year before termination year: C=project one more year at rateFuturePay then stay constant till the year before commencement year, L= stay constant till the year before commencement year., Z=zero pay starting termination year." />
      <Argument Name="firstPayAge" Description="The first age when emeber started receiving compensation." />
      <Argument Name="stopNAWGrowth" Description="Stop NAW growth after termination?" />
      <Argument Name="postNRDIncrease" Description="Include post NRD increase?" />
      <Argument Name="yearCOLAStops" Description="Year COLA Stops" />
    </Function>
    <Function Name="BTRWageBase" Description="A replacement function for the Cfgena.xla!WageBase() function.  Returns a decimal value of Social Security Wage Base at yearEvent parameter.">
      <Argument Name="yearEvent" Description="Year of requested wage base." />
      <Argument Name="rateNAW" Description="NAW increase rate, defaulted to 4.5%." />
      <Argument Name="lawYear" Description="SS law year, defaulted to current law year." />
      <Argument Name="unrounded" Description="Whether or not to apply the $300 rounding." />
    </Function>
    <Function Name="BTRNAW" Description="A replacement function for the Cfgena.xla!SSNAW() function.  Returns a decimal value of Social Security National Average Wage Base at yearEvent parameter.">
      <Argument Name="yearEvent" Description="Year of requested wage base." />
      <Argument Name="rateNAW" Description="NAW increase rate, defaulted to 4.5%." />
      <Argument Name="lawYear" Description="SS law year, defaulted to current law year." />
    </Function>
    <Function Name="BTRCoveredComp" Description="A replacement function for the Cfgena.xla!CoveredComp() function.  Returns a decimal value of covered compensation at Social Security Normal Retirement Age or at yearEvent parameter.">
      <Argument Name="yearBirth" Description="The member's year of birth." />
      <Argument Name="rateNAW" Description="NAW increase rate, defaulted to 4.5%." />
      <Argument Name="yearEvent" Description="Year of requested covered compensation." />
      <Argument Name="lawYear" Description="SS law year, defaulted to current law year." />
      <Argument Name="flagTransition" Description="Transition rule (when value is 1, else defaulted to 0), when value is 1 then the averaging of 35 years of wage base ended at the year before yearEvent else it ended at 'yearEvent'." />
      <Argument Name="optRounding" Description="Rounding, defaulted to 0, means rounded down to 12, other alues are 12 (same as 0), 1, 300, 600 or 6000 means rounded to the nearest value, else unrounded." />
    </Function>
    <Function Name="BTRNumberFormat" Description="Formats a numeric value to a string representation using the specified format and culture-specific format information.">
      <Argument Name="value" Description="The numeric value to apply formatting to." />
      <Argument Name="format" Description="The C# string format to apply.  View the function's help for more detail on possible values." />
      <Argument Name="culture" Description="Optional.  The culture name in the format languagecode2-country/regioncode2 (default of `en-US`).  See 'National Language Support (NLS) API Reference' for available names." />
    </Function>
    <Function Name="BTRDateFormat" Description="Formats a Date value to a string representation using the specified format and culture-specific format information.">
      <Argument Name="value" Description="The date to apply a format to." />
      <Argument Name="format" Description="The C# string format to apply.  View the function's help for more detail on possible values." />
      <Argument Name="culture" Description="Optional.  The culture name in the format languagecode2-country/regioncode2 (default of `en-US`).  See 'National Language Support (NLS) API Reference' for available names." />
    </Function>
    <Function Name="BTRStringBuilder" Description="Builds a string using the template with zero based subsitution tokens (i.e. `{0}`, `{1}`, ...) and substitutes them for the supplied parameters.">
      <Argument Name="template" Description="The string template to use in the builder with zero based subsitution tokens (i.e. `{0}`, `{1}`, ...)." />
      <Argument Name="parameters" Description="The parameters to substitute into the string template." />
    </Function>
    <Function Name="BTRStringBuilderWithPlaceholder" Description="Builds a string using the template with zero based subsitution tokens (i.e. {0}, {1}, ...) and substitutes them for the supplied parameters.">
      <Argument Name="placeHolders" Description="A space delimitted open and closing placeholder to use for token matching (i.e. `{{ }}`, `&lt;&lt; &gt;&gt;`, or `&lt; &gt;`)." />
      <Argument Name="template" Description="The string template to use in the builder with zero based subsitution tokens (i.e. `{0}`, `{1}`, ...)." />
      <Argument Name="parameters" Description="The parameters to substitute into the string template." />
    </Function>
    <Function Name="BTRJoin" Description="Joins a range of text strings into one string using seperator.">
      <Argument Name="argsAndSeparator" Description="The string values to join with last parameter being the separator." />
    </Function>
    <Function Name="BTRTextJoin" Description="Concatenates a list or range of text strings using a delimiter. Polyfill for non-supported Excel TEXTJOIN function.">
      <Argument Name="seperator" Description="Optional. The separator to use between values. Default is empty string." />
      <Argument Name="ignoreEmptyCells" Description="Optional. Whether or not to ignore empty cells.  Default is true" />
      <Argument Name="ranges" Description="1 to 252 text strings or ranges to be joined." />
    </Function>
    <Function Name="BTRUnique" Description="Returns a list of unique values from a given input range.">
      <Argument Name="values" Description="Range of cells to find unique values contained." />
      <Argument Name="matchInputOutputSize" Description="Optional. Whether or not to match size of `values` or the output from unique list when returning an array.  Default is true" />
      <Argument Name="ignoreEmptyCells" Description="Optional. Whether or not to ignore empty cells.  Default is true" />
      <Argument Name="ranges" Description="1 to 252 ranges to merge." />
    </Function>
    <Function Name="BTRSplit" Description="Returns an array of values by splitting the provided delimitted string.  If index is provided, returns a single value at the specified 1 based array index.">
      <Argument Name="listValues" Description="Delimmited list of values to split into an array." />
      <Argument Name="delimiter" Description="Optional.  Single character used to delimit the list.  Comma is the default." />
      <Argument Name="index" Description="Optional.  If BTRSplit is not sheet array formula, but used inline in cell formula, can provide 1 based index of value to return to eliminate need of INDEX() call." />
      <Argument Name="indexOutOfRangeDefault" Description="Optional.  If index is provided and is out of range of the values array, return this as the value.  Default is to return #VALUE." />
    </Function>
    <Function Name="BTRResourceString" Description="Returns localized resource string.">
      <Argument Name="key" Description="The resource key indicating which string to return." />
      <Argument Name="resourceStrings" Description="Range of cells to search.  The first row must be column headers with first column of key and additional columns for each culture or culture-subculture containing the values." />
      <Argument Name="culture" Description="Optional. The culture name to lookup.  If not provided, en-US is the default." />
      <Argument Name="keyName" Description="Optional. The name of the key column.  If not provided, 'key' is the default." />
    </Function>
    <Function Name="BTRContains" Description="Returns whether a specified substring occurs within a string (optionally case sensitive).">
      <Argument Name="text" Description="The text to search." />
      <Argument Name="find" Description="The text to search for." />
      <Argument Name="caseInsensitive" Description="Optional.  Whether or not the search is case insensitive or not.  True is the default." />
    </Function>
    <Function Name="BTRFilter" Description="Returns a filtered table given a list of filter columns and values to compare.">
      <Argument Name="table" Description="Range of cells to filter." />
      <Argument Name="returnColumns" Description="Comma delimitted list of column names that should be included in returned range." />
      <Argument Name="includeHeadersInResults" Description="Optional.  Whether or not to include column headers in result table. Default is true." />
      <Argument Name="expressions" Description="Paired expressions.  First item is column name to search, second item is value to filter." />
    </Function>
    <Function Name="BTRToxDSName" Description="Returns a spine-cased xDS name from PascalCase or iInputName input string.">
      <Argument Name="value" Description="TODO: Document this parameter." />
    </Function>
    <Function Name="BTRToInputName" Description="Returns an iInputName from a spine-case string.">
      <Argument Name="value" Description="TODO: Document this parameter." />
    </Function>
    <Function Name="BTRToCamelCase" Description="Returns a camelCase string from a spine-case string.">
      <Argument Name="source" Description="TODO: Document this parameter." />
    </Function>
    <Function Name="BTREbcdicText" Description="Returns a EBCDIC, extended binary-coded decimal interchange code, encoded string.">
      <Argument Name="value" Description="TODO: Document this parameter." />
      <Argument Name="padLength" Description="TODO: Document this parameter." />
    </Function>
    <Function Name="BTRLookup" Description="Returns the value (or fallback is not found) from columnToReturn column in a table range (including column headers).  Similar to VLOOKUP but always finds exact match, uses column names instead of numbers (prevents issues when columns are inserted or removed), can search specified column instead of always the first, and provides ability to give a default.">
      <Argument Name="values" Description="Value to search for." />
      <Argument Name="table" Description="Range of cells to search (first row must be column headers)." />
      <Argument Name="columnToReturn" Description="Optional. Column name containing return value. Last column is default" />
      <Argument Name="columnToSearch" Description="Optional. Column name to search.  First column is default." />
      <Argument Name="fallback" Description="Optional.  Value to return if a match is not found.  #N/A is the default." />
      <Argument Name="caseSensitive" Description="Optional.  Whether or not search is case sensitive. false is the default." />
    </Function>
    <Function Name="BTRJoinLookup" Description="Concatenates all values (or fallback is not found) from columnToReturn column in a table range (including column headers), using the specified separator between elements.  Similar to VLOOKUP but always does exact match, uses column names instead of numbers (prevents issues when columns are inserted or removed), can search specified column instead of always the first, and provides ability to give a default.">
      <Argument Name="values" Description="Comma delimitted list of values to search for." />
      <Argument Name="table" Description="Range of cells to search (first row must be column headers)." />
      <Argument Name="columnToReturn" Description="Optional. Column name containing return value. Last column is default" />
      <Argument Name="columnToSearch" Description="Optional. Column name to search.  First column is default." />
      <Argument Name="fallback" Description="Optional.  Value to return if a match is not found.  #N/A is the default." />
      <Argument Name="caseSensitive" Description="Optional.  Whether or not search is case sensitive. false is the default." />
      <Argument Name="separator" Description="Optional. The string to use as a separator.  The separator is included in the return string only if values has more than one element. ', ' is the default." />
    </Function>
    <Function Name="BTREvaluate" Description="Evaluates an Excel formula passed in.  If the formula contains one or more {K.id} tokens, each is parsed and the 'id' is used in BTRLookup to find a value to substitute into the formula">
      <Argument Name="formula" Description="Formula to evaluate with optional {K.id} tokens." />
      <Argument Name="table" Description="Range of cells to search (first row must be column headers)." />
      <Argument Name="columnToReturn" Description="Optional. Column name containing return value. Last column is default" />
      <Argument Name="columnToSearch" Description="Optional. Column name to search.  First column is default." />
      <Argument Name="caseSensitive" Description="Optional.  Whether or not search is case sensitive. false is the default." />
    </Function>
    <Function Name="BTRValidateRoutingNumber" Description="Returns whether the provided input is a valid US banking routing number.">
      <Argument Name="value" Description="The routing number input provided by user to validate." />
    </Function>
    <Function Name="BTRValidateRegEx" Description="Returns whether the regular expression finds a match in the input string.">
      <Argument Name="value" Description="The input provided by user to search for a match." />
      <Argument Name="pattern" Description="The regular expression pattern to match." />
    </Function>
    <Function Name="BTRParseDate" Description="Validates and converts the input string representation of a date and time, supporting culture specific formats, to its Date equivalent.  Throws an exception if not a valid date.">
      <Argument Name="value" Description="A string that contains a date and time to convert." />
      <Argument Name="culture" Description="A string that supplies culture-specific format information about `value`." />
      <Argument Name="allowedFormats" Description="A `|` delimitted string that supplies a list of allowable formats to attempt to parse `value`." />
      <Argument Name="validDates" Description="A `,` delimitted string of allowable dates to validate in the format of 1..N, Last, Mon-Sun, Mon-Sun.[N|Last] (Nth occurence of or last day in month), or W1-W5 (first through the fifth week of month).  If pattern starts with `!`, it is a 'not' check." />
    </Function>
    <Function Name="BTRValidateDate" Description="Returns an integer indicating whether an input string is a valid date and within specified range. -1 if invalid, 0 if valid and in range, and 1 if outside of range.">
      <Argument Name="value" Description="A string that contains a date and time to convert." />
      <Argument Name="minimum" Description="A DateTime representing the minimum value allowed if `value` is a date." />
      <Argument Name="maximum" Description="A DateTime representing the minimum value allowed if `value` is a date." />
      <Argument Name="culture" Description="A string that supplies culture-specific format information about `value`." />
      <Argument Name="allowedFormats" Description="A `|` delimitted string that supplies a list of allowable formats to attempt to parse `value`." />
      <Argument Name="validDates" Description="A `,` delimitted string of allowable dates to validate in the format of 1..N, Last, Mon-Sun, Mon-Sun.[N|Last] (Nth occurence of or last day in month), or W1-W5 (first through the fifth week of month).  If pattern starts with `!`, it is a 'not' check." />
    </Function>
    <Function Name="BTRParseAgeDate" Description="Validates and converts the input string representation of an age/date, supporting culture specific formats, to its Date equivalent.  Throws an exception if not a valid age/date.">
      <Argument Name="value" Description="A string that contains a date or age to convert." />
      <Argument Name="dateBirth" Description="The participant's date of birth." />
      <Argument Name="dateOptions" Description="Additional options to apply to date (FirstOfMonthOrCoincident=1, LastOfMonthOrCoincident=2)." />
      <Argument Name="culture" Description="A string that supplies culture-specific format information about `value`." />
      <Argument Name="allowedFormats" Description="A `|` delimitted string that supplies a list of allowable formats to attempt to parse `value`." />
    </Function>
    <Function Name="BTRValidateAgeDate" Description="Returns an integer indicating whether an input string is a valid age/date and within specified range. -1 if invalid, 0 if valid and in range, and 1 if outside of range.">
      <Argument Name="value" Description="A string that contains a date or age to validate." />
      <Argument Name="dateBirth" Description="The participant's date of birth." />
      <Argument Name="minimum" Description="A DateTime representing the minimum value allowed if `value` is a date." />
      <Argument Name="maximum" Description="A DateTime representing the minimum value allowed if `value` is a date." />
      <Argument Name="dateOptions" Description="Additional options to apply to date (FirstOfMonthOrCoincident=1, LastOfMonthOrCoincident=2)." />
      <Argument Name="culture" Description="A string that supplies culture-specific format information about `value`." />
      <Argument Name="allowedFormats" Description="A `|` delimitted string that supplies a list of allowable formats to attempt to parse `value`." />
    </Function>
    <Function Name="BTRParseInteger" Description="Validates and converts the input string representation of a number to its integer (no decimals) equivalent.">
      <Argument Name="value" Description="A string that contains a number to convert." />
      <Argument Name="culture" Description="A string that supplies culture-specific format information about `value`." />
    </Function>
    <Function Name="BTRValidateInteger" Description="Returns an integer indicating whether an input string is a valid integer and within specified range. -1 if invalid, 0 if valid and in range, and 1 if outside of range.">
      <Argument Name="value" Description="A string that contains a date and time to convert." />
      <Argument Name="minimum" Description="A integer representing the minimum value allowed if `value` is a integer." />
      <Argument Name="maximum" Description="A integer representing the minimum value allowed if `value` is a integer." />
      <Argument Name="culture" Description="A string that supplies culture-specific format information about `value`." />
    </Function>
    <Function Name="BTRParseDecimal" Description="Validates and converts the input string representation of a number to its decimal equivalent.">
      <Argument Name="value" Description="A string that contains a number to convert." />
      <Argument Name="culture" Description="A string that supplies culture-specific format information about `value`." />
    </Function>
    <Function Name="BTRValidateDecimal" Description="Returns an integer indicating whether an input string is a valid decimal value and within specified range. -1 if invalid, 0 if valid and in range, and 1 if outside of range.">
      <Argument Name="value" Description="A string that contains a date and time to convert." />
      <Argument Name="minimum" Description="A double representing the minimum value allowed if `value` is a double." />
      <Argument Name="maximum" Description="A double representing the minimum value allowed if `value` is a double." />
      <Argument Name="culture" Description="A string that supplies culture-specific format information about `value`." />
      <Argument Name="decimalPlaces" Description="An integer value representing the maximum number of decimal places allowed." />
    </Function>
    <Function Name="MapOrdinal" Description="Returns the current ordinal position of the current element being processed.  If 'scopeDepth' is passed, it is the current ordinal position of the ancestor mapping element determined by 'scopeDepth' levels.  Placeholder returning defaultValue in Excel.">
      <Argument Name="scopeDepth" Description="How many parent levels to walk back up to determine mapping scope.  Default value is one." />
      <Argument Name="defaultValue" Description="Value to return to make coding specification formulas easier." />
    </Function>
    <Function Name="MapValue" Description="Returns 'fieldName' (element or attribute) value from provided Xml datasource.  Placeholder returning defaultValue in Excel.">
      <Argument Name="fieldName" Description="The name of the xml element or attribute." />
      <Argument Name="defaultValue" Description="Value to return to make coding specification formulas easier." />
    </Function>
    <Function Name="MapToNumber" Description="Converts a value into a number.  Needed for 'strong typing' in calculated expressions.">
      <Argument Name="value" Description="The value to attempt to convert to a number." />
      <Argument Name="defaultValue" Description="Value to return to make coding specification formulas easier." />
    </Function>
    <Function Name="MapToDate" Description="Converts a value into a date.  Needed for 'strong typing' in calculated expressions.">
      <Argument Name="value" Description="The value to attempt to convert to a date." />
      <Argument Name="defaultValue" Description="Value to return to make coding specification formulas easier." />
    </Function>
    <Function Name="MapFormatValue" Description="Returns 'value' formatted as string given the desired 'format' pattern.  Placeholder returning [FormatValue('value', 'format'] string.">
      <Argument Name="value" Description="The value (or model field) to format." />
      <Argument Name="format" Description="A valid C# format string in the format of {0:format}." />
      <Argument Name="defaultValue" Description="Value to return to make coding specification formulas easier." />
    </Function>
  </FunctionInfo>
</IntelliSense>